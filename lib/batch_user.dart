import 'dart:collection';

import 'package:batch_flutter/src/typed_attribute.dart';
import 'package:flutter/services.dart';
import 'package:flutter/widgets.dart';

/// Provides user related functionality, such as custom data and events.
/// Do not instanciate this: use the `instance` static property.
class BatchUser {
  static const MethodChannel _channel =
      const MethodChannel('batch_flutter.user');

  /// Batch User module singleton.
  static BatchUser instance = new BatchUser();

  /// Get the unique Installation ID, generated by the SDK.
  Future<String?> get installationID async {
    return await _channel.invokeMethod('user.getInstallationID');
  }

  /// Instanciate a new [BatchUserDataEditor] to edit custom data attributes and tags.
  ///
  /// See [BatchUserDataEditor]'s documentation for more info.
  BatchUserDataEditor newEditor() {
    return BatchUserDataEditorImpl();
  }

  /// Track an event.
  ///
  /// The event name is required and must not be empty. It should be composed of letters,
  /// numbers or underscores ([a-z0-9_]) and canâ€™t be longer than 30 characters.
  ///
  /// The event label is an optional string, which must not be empty or longer
  /// than 200 characters. If the label is too long, it will be ignored.
  ///
  /// The event data is an optional object holding attributes and tags related
  /// to the event. See [BatchEventData]'s documentation for more info.
  void trackEvent({required String name, String? label, BatchEventData? data}) {
    Map eventArgs = {"name": name, "label": label};
    if (data != null) {
      eventArgs["event_data"] = data.internalGetBridgeRepresentation();
    }
    _channel.invokeMethod("user.track.event", eventArgs);
  }

  /// Track a transaction.
  void trackTransaction(double amount) {
    _channel.invokeMethod("user.track.transaction", {"amount": amount});
  }

  /// Track a geolocation update.
  ///
  /// Batch does not ask for location permission or acquire user location on
  /// your behalf. Acquire location permission and values on your own and
  /// communicate them to Batch (if needed) using this method.
  void trackLocation({required double latitude, required double longitude}) {
    _channel.invokeMethod(
        "user.track.location", {"latitude": latitude, "longitude": longitude});
  }
}

/// Batch's user data editor.
/// This object is used to transactionally edit user data. Calls can be chained
/// in a builder-like fashion.
/// Once you're done with your changes, call `save()` to persist your changes.
abstract class BatchUserDataEditor {
  /// Set the application langauge. Overrides Batch's automatically detected value.
  ///
  /// `null` deletes the override: Batch will autodetect the user language.
  BatchUserDataEditor setLanguage(String? language);

  /// Set the application region. Overrides Batch's automatically detected value.
  ///
  /// `null` deletes the override: Batch will autodetect the user region.
  BatchUserDataEditor setRegion(String? region);

  /// Set the custom user identifier.
  ///
  /// Be careful: you should make sure the identifier uniquely identifies a user.
  /// When pushing using an identifier, all installations with that identifier will get the Push,
  /// which can cause some privacy issues if done wrong.
  BatchUserDataEditor setIdentifier(String? identifier);

  /// Set a string attribute for a key.
  ///
  /// Attribute's key cannot be empty. It should be made of letters, numbers or underscores ([a-z0-9_])
  /// and can't be longer than 30 characters.
  /// String attribut values are non-empty strings and can't be longer than 64 characters.
  ///
  /// Any attribute with an invalid key or value will be ignored.
  BatchUserDataEditor setStringAttribute(String key, String value);

  /// Set an integer attribute for a key.
  ///
  /// Attribute's key cannot be empty. It should be made of letters, numbers or underscores ([a-z0-9_])
  /// and can't be longer than 30 characters.
  ///
  /// Any attribute with an invalid key or value will be ignored.
  BatchUserDataEditor setIntegerAttribute(String key, int value);

  /// Set a double attribute for a key.
  ///
  /// Attribute's key cannot be empty. It should be made of letters, numbers or underscores ([a-z0-9_])
  /// and can't be longer than 30 characters.
  ///
  /// Any attribute with an invalid key or value will be ignored.
  BatchUserDataEditor setDoubleAttribute(String key, double value);

  /// Set a boolean attribute for a key.
  ///
  /// Attribute's key cannot be empty. It should be made of letters, numbers or underscores ([a-z0-9_])
  /// and can't be longer than 30 characters.
  ///
  /// Any attribute with an invalid key or value will be ignored.
  BatchUserDataEditor setBooleanAttribute(String key, bool value);

  /// Set a Date attribute for a key.
  ///
  /// Attribute's key cannot be empty. It should be made of letters, numbers or underscores ([a-z0-9_])
  /// and can't be longer than 30 characters.
  ///
  /// Date attribute values are sent in UTC to Batch. If you notice that the reported
  /// time may be off, try making an UTC DateTime for consistency.
  ///
  /// Any attribute with an invalid key or value will be ignored.
  BatchUserDataEditor setDateTimeAttribute(String key, DateTime value);

  /// Delete an attribute using its key.
  ///
  /// If the attribute doesn't exist, this method is silently ignored.
  BatchUserDataEditor removeAttribute(String key);

  /// Delete all attributes.
  BatchUserDataEditor clearAttributes();

  /// Add a tag to a collection.
  ///
  /// If the collection doesn't exist, it will be created.
  ///
  /// The tag collection name must be a string of letters, numbers or
  /// underscores (`[a-z0-9_]`) and can't be longer than 30 characters.
  ///
  /// The tag cannot be empty or longer than 64 characters.
  BatchUserDataEditor addTag(String collection, String tag);

  /// Delete a tag from a collection.
  ///
  /// If the collection is empty, it will be deleted.
  ///
  /// The tag collection name must be a string of letters, numbers or
  /// underscores (`[a-z0-9_]`) and can't be longer than 30 characters.
  ///
  /// If the tag doesn't exist, this method will silently do nothing.
  BatchUserDataEditor removeTag(String collection, String tag);

  /// Removes all tags from a collection.
  ///
  /// The tag collection name must be a string of letters, numbers or
  /// underscores (`[a-z0-9_]`) and can't be longer than 30 characters.
  BatchUserDataEditor clearTagCollection(String collection);

  /// Removes all tags.
  BatchUserDataEditor clearTags();

  /// Save all of the pending changes. This action cannot be undone.
  void save();
}

/// Object holding data to be associated to an event.
///
/// Events support at most 10 tags and 15 attributes. Event data that is over
/// the limit will be discarded.
/// Note: those limits are enforced by the native SDKs, they might be different
/// depending on the underlying SDK version your project is using.
///
/// Keys should be strings composed of letters, numbers or underscores
/// ([a-z0-9_]) and can't be longer than 30 characters.
class BatchEventData {
  static const int _maxStringLength = 64;

  Set<String> _tags = new HashSet();
  Map<String, TypedAttribute> _attributes = new HashMap();

  /// Add a tag.
  /// Collections are not supported.
  ///
  /// Tags can't be longer than 64 characters, and can't be empty.
  /// For better results, you should trim/lowercase your strings,
  /// and use slugs when possible.
  BatchEventData addTag(String tag) {
    if (tag.length == 0 || tag.length > _maxStringLength) {
      // TODO: log
      return this;
    }
    _tags.add(tag.toLowerCase());
    return this;
  }

  /// Add a string attribute for the given key.
  ///
  /// The attribute key should be a string composed of letters, numbers
  /// or underscores ([a-z0-9_]) and can't be longer than 30 characters.
  ///
  /// The attribute string value can't be empty or longer than 64 characters.
  /// For better results, you should trim/lowercase your strings
  /// and use slugs when possible.
  BatchEventData putString(String key, String value) {
    if (_validateAttributeKey()) {
      _attributes[key.toLowerCase()] =
          TypedAttribute(type: TypedAttributeType.string, value: value);
    }
    return this;
  }

  /// Add a boolean attribute for the given key.
  ///
  /// The attribute key should be a string composed of letters, numbers
  /// or underscores ([a-z0-9_]) and can't be longer than 30 characters.
  BatchEventData putBoolean(String key, bool value) {
    if (_validateAttributeKey()) {
      _attributes[key.toLowerCase()] =
          TypedAttribute(type: TypedAttributeType.boolean, value: value);
    }
    return this;
  }

  /// Add an integer attribute for the given key.
  ///
  /// The attribute key should be a string composed of letters, numbers
  /// or underscores ([a-z0-9_]) and can't be longer than 30 characters.
  BatchEventData putInteger(String key, int value) {
    if (_validateAttributeKey()) {
      _attributes[key.toLowerCase()] =
          TypedAttribute(type: TypedAttributeType.integer, value: value);
    }
    return this;
  }

  /// Add a double attribute for the given key.
  ///
  /// The attribute key should be a string composed of letters, numbers
  /// or underscores ([a-z0-9_]) and can't be longer than 30 characters.
  BatchEventData putDouble(String key, double value) {
    if (_validateAttributeKey()) {
      _attributes[key.toLowerCase()] =
          TypedAttribute(type: TypedAttributeType.float, value: value);
    }
    return this;
  }

  /// Add a DateTime attribute for the given key.
  ///
  /// The attribute key should be a string composed of letters, numbers
  /// or underscores ([a-z0-9_]) and can't be longer than 30 characters.
  ///
  /// Date attribute values are sent in UTC to Batch. If you notice that the reported
  /// time may be off, try making an UTC DateTime for consistency.
  BatchEventData putDate(String key, DateTime value) {
    if (_validateAttributeKey()) {
      _attributes[key.toLowerCase()] = TypedAttribute(
          type: TypedAttributeType.date,
          value: value.toUtc().millisecondsSinceEpoch);
    }
    return this;
  }

  /// Internal method. Get the serializable representation of this object
  ///
  /// <nodoc>
  @protected
  Map internalGetBridgeRepresentation() {
    return {
      "attributes": _attributes
          .map((key, value) => MapEntry(key, value.toBridgeRepresentation())),
      "tags": _tags.toList()
    };
  }

  bool _validateAttributeKey() {
    //TODO: implement attribute key validation
    //TODO: log on error
    return true;
  }
}

/// Private class: Do not instanciate this: use the `newEditor()` method on `BatchUser`.
/// <nodoc>
class BatchUserDataEditorImpl implements BatchUserDataEditor {
  @override
  BatchUserDataEditor addTag(String collection, String tag) {
    // TODO: implement addTag
    throw UnimplementedError();
  }

  @override
  BatchUserDataEditor clearAttributes() {
    // TODO: implement clearAttributes
    throw UnimplementedError();
  }

  @override
  BatchUserDataEditor clearTagCollection(String collection) {
    // TODO: implement clearTagCollection
    throw UnimplementedError();
  }

  @override
  BatchUserDataEditor clearTags() {
    // TODO: implement clearTags
    throw UnimplementedError();
  }

  @override
  BatchUserDataEditor removeAttribute(String key) {
    // TODO: implement removeAttribute
    throw UnimplementedError();
  }

  @override
  BatchUserDataEditor removeTag(String collection, String tag) {
    // TODO: implement removeTag
    throw UnimplementedError();
  }

  @override
  BatchUserDataEditor setBooleanAttribute(String key, bool value) {
    // TODO: implement setBooleanAttribute
    throw UnimplementedError();
  }

  @override
  BatchUserDataEditor setDateTimeAttribute(String key, DateTime value) {
    // TODO: implement setDateTimeAttribute
    throw UnimplementedError();
  }

  @override
  BatchUserDataEditor setDoubleAttribute(String key, double value) {
    // TODO: implement setDoubleAttribute
    throw UnimplementedError();
  }

  @override
  BatchUserDataEditor setIdentifier(String? identifier) {
    // TODO: implement setIdentifier
    throw UnimplementedError();
  }

  @override
  BatchUserDataEditor setIntegerAttribute(String key, int value) {
    // TODO: implement setIntegerAttribute
    throw UnimplementedError();
  }

  @override
  BatchUserDataEditor setLanguage(String? language) {
    // TODO: implement setLanguage
    throw UnimplementedError();
  }

  @override
  BatchUserDataEditor setRegion(String? region) {
    // TODO: implement setRegion
    throw UnimplementedError();
  }

  @override
  BatchUserDataEditor setStringAttribute(String key, String value) {
    // TODO: implement setStringAttribute
    throw UnimplementedError();
  }

  @override
  void save() {
    // TODO: implement save
  }
}
